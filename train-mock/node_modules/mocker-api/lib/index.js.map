{"version":3,"sources":["../src/index.ts"],"names":["pathToRegexp","toRegexp","mocker","pathMatch","options","path","keys","re","pathname","params","m","exec","key","param","i","length","name","decodeURIComponent","repeat","split","delimiter","app","watchFile","conf","watchFiles","Array","isArray","some","file","Error","getConfig","req","res","next","_proxy","changeHost","pathRewrite","proxy","proxyConf","httpProxy","httpProxyConf","bodyParserConf","bodyParserJSON","bodyParserText","bodyParserRaw","bodyParserUrlencoded","watchOptions","header","watcher","chokidar","watch","map","PATH","dirname","require","resolve","on","event","cleanCache","forEach","console","log","color","green_b","black","green","replace","process","cwd","ex","error","red_b","red","all","proxyKey","Object","find","kname","RegExp","method","mockerKey","accessOptions","get","keyName","setHeader","toLocaleUpperCase","sendStatus","bodyParserMethd","bodyParser","json","contentType","raw","text","urlencoded","extended","result","rgxStr","indexOf","sensitive","strict","end","URL","parse","url","currentProxy","headers","host","proxyOptions","listeners","proxyListeners","rePath","currentPath","push","query","originalUrl","join","proxyHTTP","createProxyServer","web","assign","target","href","modulePath","e","module","cache","parent","children","splice","reduce","mockerItem"],"mappings":"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","sourcesContent":["import URL from 'url';\nimport PATH from 'path';\nimport { Request, Response, NextFunction, Express } from 'express';\nimport bodyParser from 'body-parser';\nimport httpProxy from 'http-proxy';\nimport * as toRegexp from 'path-to-regexp';\nimport { TokensToRegexpOptions, ParseOptions, Key } from 'path-to-regexp';\nimport clearModule from 'clear-module';\nimport chokidar from 'chokidar';\nimport color from 'colors-cli/safe';\n\n\nexport type MockerResultFunction = ((req: Request, res: Response, next?: NextFunction) => void);\nexport type MockerResult = string | { [key: string]: any } | MockerResultFunction;\n\nexport interface Mocker {\n  _proxy?: MockerOption;\n  [key: string]: MockerResult;\n}\n\nexport interface MockerOption {\n  changeHost?: boolean;\n  pathRewrite?: {\n    [key: string]: 'string';\n  },\n  proxy?: {\n    [key: string]: 'string';\n  },\n  httpProxy?: {\n    options?: httpProxy.ServerOptions;\n    listeners?: {\n      [key: string]: () => void;\n    }\n  };\n  bodyParserConf?: {\n    [key: string]: 'raw' | 'text' | 'urlencoded' | 'json';\n  };\n  bodyParserJSON?: bodyParser.OptionsJson;\n  bodyParserText?: bodyParser.OptionsText;\n  bodyParserRaw?: bodyParser.Options;\n  bodyParserUrlencoded?: bodyParser.OptionsUrlencoded;\n  watchOptions?: chokidar.WatchOptions;\n  header?: {\n    [key: string]: string | number | string[];\n  }\n}\n\nconst pathToRegexp = toRegexp.pathToRegexp;\nlet mocker: Mocker = {};\n\nfunction pathMatch(options: TokensToRegexpOptions & ParseOptions) {\n  options = options || {};\n  return function (path: string) {\n    var keys: (Key & TokensToRegexpOptions & ParseOptions & { repeat: boolean })[] = [];\n    var re = pathToRegexp(path, keys, options);\n    return function (pathname: string, params?: any) {\n      var m = re.exec(pathname);\n      if (!m) return false;\n      params = params || {};\n      var key, param;\n      for (var i = 0; i < keys.length; i++) {\n        key = keys[i];\n        param = m[i + 1];\n        if (!param) continue;\n        params[key.name] = decodeURIComponent(param);\n        if (key.repeat) params[key.name] = params[key.name].split(key.delimiter)\n      }\n      return params;\n    }\n  }\n}\n\nexport default function (app: Express, watchFile: string | string[], conf: MockerOption = {}) {\n  const watchFiles = Array.isArray(watchFile) ? watchFile : [watchFile];\n  if (watchFiles.some(file => !file)) {\n    throw new Error('Mocker file does not exist!.');\n  }\n\n  mocker = getConfig();\n\n\n  if (!mocker) {\n    return (req: Request, res: Response, next: NextFunction) => {\n      next();\n    }\n  }\n  const {\n    changeHost = true,\n    pathRewrite = {},\n    proxy: proxyConf = {},\n    httpProxy: httpProxyConf = {},\n    bodyParserConf= {},\n    bodyParserJSON = {},\n    bodyParserText = {},\n    bodyParserRaw = {},\n    bodyParserUrlencoded = {},\n    watchOptions = {},\n    header = {}\n  } = {...conf, ...(mocker._proxy || {})}\n  // 监听配置入口文件所在的目录，一般为认为在配置文件/mock 目录下的所有文件\n  // 加上require.resolve，保证 `./mock/`能够找到`./mock/index.js`，要不然就要监控到上一级目录了\n  const watcher = chokidar.watch(watchFiles.map(watchFile => PATH.dirname(require.resolve(watchFile))), watchOptions);\n\n  watcher.on('all', (event, path) => {\n    if (event === 'change' || event === 'add') {\n      try {\n        // 当监听的可能是多个配置文件时，需要清理掉更新文件以及入口文件的缓存，重新获取\n        cleanCache(path);\n        watchFiles.forEach(file => cleanCache(file));\n        mocker = getConfig();\n        console.log(`${color.green_b.black(' Done: ')} Hot Mocker ${color.green(path.replace(process.cwd(), ''))} file replacement success!`);\n      } catch (ex) {\n        console.error(`${color.red_b.black(' Failed: ')} Hot Mocker ${color.red(path.replace(process.cwd(), ''))} file replacement failed!!`);\n      }\n    }\n  })\n  // 监听文件修改重新加载代码\n  // 配置热更新\n  app.all('/*', (req: Request, res: Response, next: NextFunction) => {\n    \n    /**\n     * Get Proxy key\n     */\n    const proxyKey = Object.keys(proxyConf).find((kname) => {\n      return !!pathToRegexp(kname.replace((new RegExp('^' + req.method + ' ')), '')).exec(req.path);\n    });\n    /**\n     * Get Mocker key\n     * => `GET /api/:owner/:repo/raw/:ref`\n     * => `GET /api/:owner/:repo/raw/:ref/(.*)`\n     */\n    const mockerKey: string = Object.keys(mocker).find((kname) => {\n      return !!pathToRegexp(kname.replace((new RegExp('^' + req.method + ' ')), '')).exec(req.path);\n    });\n    /**\n     * Access Control Allow options.\n     * https://github.com/jaywcjlove/mocker-api/issues/61\n     */\n    const accessOptions: MockerOption['header'] = {\n      'Access-Control-Allow-Origin': req.get('Origin') || '*',\n      'Access-Control-Allow-Methods': 'POST, GET, OPTIONS, PUT, DELETE',\n      'Access-Control-Allow-Headers': 'Content-Type, X-Requested-With',\n      'Access-Control-Allow-Credentials': 'true',\n      ...header,\n    }\n    Object.keys(accessOptions).forEach(keyName => {\n      res.setHeader(keyName, accessOptions[keyName]);\n    });\n    // fix issue 34 https://github.com/jaywcjlove/mocker-api/issues/34\n    // In some cross-origin http request, the browser will send the preflighted options request before sending the request methods written in the code.\n    if (!mockerKey && req.method.toLocaleUpperCase() === 'OPTIONS'\n      && Object.keys(mocker).find((kname) => !!pathToRegexp(kname.replace((new RegExp('^(PUT|POST|GET|DELETE) ')), '')).exec(req.path))\n    ) {\n      return res.sendStatus(200);\n    }\n\n\n    if (mocker[mockerKey]) {\n      let bodyParserMethd = bodyParser.json({ ...bodyParserJSON }); // 默认使用json解析\n      let contentType = req.get('Content-Type');\n      /**\n       * `application/x-www-form-urlencoded; charset=UTF-8` => `application/x-www-form-urlencoded`\n       * Issue: https://github.com/jaywcjlove/mocker-api/issues/50\n       */\n      contentType = contentType && contentType.replace(/;.*$/, '');\n      if(bodyParserConf && bodyParserConf[contentType]) {\n        // 如果存在bodyParserConf配置 {'text/plain': 'text','text/html': 'text'}\n        switch(bodyParserConf[contentType]){// 获取bodyParser的方法\n          case 'raw': bodyParserMethd = bodyParser.raw({...bodyParserRaw }); break;\n          case 'text': bodyParserMethd = bodyParser.text({...bodyParserText }); break;\n          case 'urlencoded': bodyParserMethd = bodyParser.urlencoded({extended: false, ...bodyParserUrlencoded }); break;\n          case 'json': bodyParserMethd = bodyParser.json({ ...bodyParserJSON });//使用json解析 break;\n        }\n      } else {\n        // 兼容原来的代码,默认解析\n        // Compatible with the original code, default parsing\n        switch(contentType){\n          case 'text/plain': bodyParserMethd = bodyParser.raw({...bodyParserRaw }); break;\n          case 'text/html': bodyParserMethd = bodyParser.text({...bodyParserText }); break;\n          case 'application/x-www-form-urlencoded': bodyParserMethd = bodyParser.urlencoded({extended: false, ...bodyParserUrlencoded }); break;\n        }\n      }\n\n      bodyParserMethd(req, res, function () {\n        const result = mocker[mockerKey];\n        if (typeof result === 'function') {\n          const rgxStr = ~mockerKey.indexOf(' ') ? ' ' : '';\n          req.params = pathMatch({ sensitive: false, strict: false, end: false })(mockerKey.split(new RegExp(rgxStr))[1])(URL.parse(req.url).pathname);\n          result(req, res, next);\n        } else {\n          res.json(result);\n        }\n      });\n    } else if (proxyKey && proxyConf[proxyKey]) {\n      const currentProxy = proxyConf[proxyKey];\n      const url = URL.parse(currentProxy);\n      if (changeHost) {\n        req.headers.host = url.host;\n      }\n      const { options: proxyOptions = {}, listeners: proxyListeners = {} }: MockerOption['httpProxy'] = httpProxyConf;\n      /**\n       * rewrite target's url path. Object-keys will be used as RegExp to match paths.\n       * https://github.com/jaywcjlove/mocker-api/issues/62\n       */\n      Object.keys(pathRewrite).forEach(rgxStr => {\n        const rePath = req.path.replace(new RegExp(rgxStr), pathRewrite[rgxStr]);\n        const currentPath = [rePath];\n        if (req.url.indexOf('?') > 0) {\n          currentPath.push(req.url.replace(/(.*)\\?/, ''));\n        }\n        req.query = URL.parse(req.url, true).query;\n        req.url = req.originalUrl = currentPath.join('?');\n      });\n\n      const proxyHTTP = httpProxy.createProxyServer({});\n      Object.keys(proxyListeners).forEach(event => {\n        proxyHTTP.on(event, proxyListeners[event]);\n      });\n\n      proxyHTTP.web(req, res, Object.assign({ target: url.href }, proxyOptions));\n    } else {\n      next();\n    }\n  });\n\n  // The old module's resources to be released.\n  function cleanCache(modulePath: string) {\n    // The entry file does not have a .js suffix,\n    // causing the module's resources not to be released.\n    // https://github.com/jaywcjlove/webpack-api-mocker/issues/30\n    try {\n      modulePath = require.resolve(modulePath);\n    } catch (e) {}\n    var module = require.cache[modulePath];\n    if (!module) return;\n    // remove reference in module.parent\n    if (module.parent) {\n      module.parent.children.splice(module.parent.children.indexOf(module), 1);\n    }\n    // https://github.com/jaywcjlove/mocker-api/issues/42\n    clearModule(modulePath);\n  }\n  // Merge multiple Mockers\n  function getConfig() {\n    return watchFiles.reduce((mocker, file) => {\n      const mockerItem = require(file);\n      return Object.assign(mocker, mockerItem.default ? mockerItem.default : mockerItem);\n    }, {})\n  }\n  return (req: Request, res: Response, next: NextFunction) => {\n    next();\n  }\n}\n"]}